Λειτουργία Αρχείων και Αντικειμένων
Αρχικοποίηση Εφαρμογής:

Κατά την εκκίνηση, το JSONHandler φορτώνει τα δεδομένα από το tasks.json και δημιουργεί αντικείμενα Task.
Τα αντικείμενα Task παραμένουν στη μνήμη και αποθηκεύονται σε μια λίστα (List<Task>).
Επεξεργασία Δεδομένων:

Όταν γίνεται επεξεργασία ή τροποποίηση ενός Task, ενημερώνεται η αναφορά του αντικειμένου στη λίστα που βρίσκεται στη μνήμη.
Οι αλλαγές δεν καταγράφονται αμέσως στο JSON αρχείο.
Αποθήκευση Δεδομένων:

Κατά το κλείσιμο της εφαρμογής (primaryStage.setOnCloseRequest), καλείται η JSONHandler.saveTasks για να αποθηκευτούν όλα τα αντικείμενα από τη λίστα List<Task> στο αρχείο tasks.json.


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
ΑΡΧΕΙΑ ΚΩΔΙΚΑ

MainApp.java
Είναι η κύρια κλάση της εφαρμογής.
Εκκινεί την εφαρμογή JavaFX, φορτώνοντας το κύριο παράθυρο μέσω του FXMLLoader.
Διαχειρίζεται το κλείσιμο της εφαρμογής, αποθηκεύοντας όλες τις πληροφορίες (εργασίες, κατηγορίες, επίπεδα προτεραιότητας) σε JSON αρχεία.
Σχετίζεται άμεσα με τον MainController, καθώς ανακτά τον έλεγχο δεδομένων από αυτόν.

MainController.java
Ελέγχει τη βασική διεπαφή χρήστη (UI) που φορτώνεται από το main.fxml.
Φορτώνει εργασίες (Task) από το JSON μέσω του JSONHandler κατά την αρχικοποίηση.
Συνδέει τις εργασίες με το ListView για εμφάνιση στη λίστα.
Περιλαμβάνει λειτουργικότητα για:
Προσθήκη νέων εργασιών (onAddTask).
Επεξεργασία υφιστάμενων εργασιών μέσω διαλόγου (editTask).
Αποθήκευση των δεδομένων στην έξοδο της εφαρμογής.

TaskController.java
Ελέγχει το διάλογο που εμφανίζεται κατά την προσθήκη ή επεξεργασία μιας εργασίας.
Χρησιμοποιεί τα στοιχεία της διεπαφής, όπως TextField, ComboBox και DatePicker, για να συλλέξει τις πληροφορίες μιας εργασίας.
Επικοινωνεί με τον MainController για να επιστρέψει την νέα ή ενημερωμένη εργασία.
Περιλαμβάνει επιλογή διαγραφής εργασίας.

JSONHandler.java
Είναι η βοηθητική κλάση για τη διαχείριση δεδομένων JSON.
Παρέχει μεθόδους για:
Φόρτωση εργασιών από το tasks.json (loadTasks).
Αποθήκευση εργασιών στο ίδιο αρχείο (saveTasks).
Αντίστοιχες λειτουργίες για κατηγορίες (categories.json) και προτεραιότητες (priorities.json).
Εξασφαλίζει ότι οι αλλαγές που γίνονται κατά τη διάρκεια χρήσης της εφαρμογής αποθηκεύονται με συνέπεια.



\\\\\\\\\\\\\
Δημιουργία Αντικειμένων και Σχέση has-a

Η εφαρμογή υλοποιεί σχέσεις μεταξύ αντικειμένων με βάση την αρχή has-a. Η σχέση has-a δείχνει ότι ένα αντικείμενο περιέχει άλλα αντικείμενα ως μέλη.

Task:
Ένα Task αντικείμενο έχει:
Μία κατηγορία (Category).
Ένα επίπεδο προτεραιότητας (PriorityLevel).
Αυτές οι σχέσεις υλοποιούνται μέσω των πεδίων category και priority, που είναι τύπου Category και PriorityLevel αντίστοιχα.

Category και PriorityLevel:
Τα αντικείμενα Category και PriorityLevel δημιουργούνται από τα αντίστοιχα JSON αρχεία και διατηρούνται σε λίστες στη μνήμη.
Παράδειγμα:
Όταν φορτώνεται ένα Task από το tasks.json, δημιουργείται ένα αντικείμενο Task που συνδέεται με ήδη υπάρχοντα αντικείμενα Category και PriorityLevel.



\\\\\\\\\\\\\\\\\\\\\\\\\\
Διαχείριση Μνήμης και Αντικειμένων

Κατά την εκτέλεση της εφαρμογής:

Φόρτωση Δεδομένων:
Πρώτα φορτώνονται οι κατηγορίες (categories) και τα επίπεδα προτεραιότητας (priorities) στη μνήμη. Αυτά αποθηκεύονται ως λίστες αντικειμένων Category και PriorityLevel.
Στη συνέχεια, δημιουργούνται τα Task αντικείμενα, τα οποία συνδέονται με τα ήδη φορτωμένα Category και PriorityLevel.

Συσχέτιση Αντικειμένων:
Κατά τη δημιουργία ενός Task, τα πεδία category και priority αναφέρονται στα αντίστοιχα αντικείμενα Category και PriorityLevel. Έτσι, αντί να αποθηκεύονται ως απλές συμβολοσειρές, τα Task έχουν πρόσβαση σε πλήρη αντικείμενα που αντιπροσωπεύουν την κατηγορία και την προτεραιότητά τους.

Ενημέρωση Δεδομένων:
Όταν μια κατηγορία ή ένα επίπεδο προτεραιότητας διαγράφεται, όλα τα συνδεδεμένα Task αντικείμενα ενημερώνονται ή διαγράφονται ανάλογα.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Πλεονεκτήματα Σχέσης has-a
Ακεραιότητα δεδομένων:
Εξασφαλίζεται ότι κάθε Task αναφέρεται σε μία έγκυρη κατηγορία και προτεραιότητα.
Ευκολία διαχείρισης:
Οι αλλαγές σε ένα Category ή PriorityLevel αντικείμενο αντικατοπτρίζονται άμεσα σε όλα τα Task που συνδέονται με αυτά.
Εξοικονόμηση μνήμης:
Αντί να αποθηκεύεται η κατηγορία και η προτεραιότητα ως επαναλαμβανόμενα String σε κάθε Task, αποθηκεύονται μόνο μία φορά στη μνήμη και αναφέρονται με δείκτες (references).

